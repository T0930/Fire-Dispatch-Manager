[{"C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\index.js":"1","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\App.js":"2","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\components\\Dashboard.js":"3","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\components\\NavBar.js":"4","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\pages\\Rejections.js":"5","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\pages\\Active.js":"6","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\pages\\Inactive.js":"7","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\pages\\Login.js":"8","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\pages\\Home.js":"9","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\pages\\Interviews.js":"10","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\utils\\queries.js":"11","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\utils\\mutations.js":"12","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\utils\\Auth.js":"13"},{"size":247,"mtime":1645820169449,"results":"14","hashOfConfig":"15"},{"size":600,"mtime":1645820169448,"results":"16","hashOfConfig":"15"},{"size":386,"mtime":1645822574567,"results":"17","hashOfConfig":"15"},{"size":6749,"mtime":1646070551076,"results":"18","hashOfConfig":"15"},{"size":1396,"mtime":1646068626910,"results":"19","hashOfConfig":"15"},{"size":2499,"mtime":1646068626907,"results":"20","hashOfConfig":"15"},{"size":120,"mtime":1645722870656,"results":"21","hashOfConfig":"15"},{"size":2427,"mtime":1646070553732,"results":"22","hashOfConfig":"15"},{"size":6039,"mtime":1646068755048,"results":"23","hashOfConfig":"15"},{"size":1588,"mtime":1646068755049,"results":"24","hashOfConfig":"15"},{"size":624,"mtime":1646068755050,"results":"25","hashOfConfig":"15"},{"size":1185,"mtime":1646070555997,"results":"26","hashOfConfig":"15"},{"size":1042,"mtime":1646069736244,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"urszbe",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\index.js",[],"C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\App.js",["60","61"],"import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport Dashboard from \"./components/Dashboard\";\nimport './style.css'\n\n// const App = () => <Dashboard />;\n\nconst client = new ApolloClient({\n    uri: '/graphql',\n    cache: new InMemoryCache(),\n  });\n  \n  function App() {\n    return (\n      <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Dashboard />\n           \n        </>\n      </Router>\n      </ApolloProvider>\n    );\n  }\n\nexport default App;\n","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\components\\Dashboard.js",[],"C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\components\\NavBar.js",["62","63","64","65","66","67","68","69"],"import React from \"react\";\nimport {\n    CDBSidebar,\n    CDBSidebarContent,\n    CDBSidebarFooter,\n    CDBSidebarHeader,\n    CDBSidebarMenu,\n    CDBSidebarMenuItem,\n} from 'cdbreact';\nimport { NavLink } from 'react-router-dom';\nimport Active from '../pages/Active'\nimport Rejections from '../pages/Rejections'\nimport Inactive from '../pages/Inactive'\nimport Interviews from '../pages/Interviews'\nimport Home from '../pages/Home'\nimport Login from '../pages/Login'\n\n\nfunction NavBar({ currentPage, handlePageChange }) {\n    const renderPage = () => {\n        if (currentPage === 'Home') {\n            return <Home />;\n        }\n        if (currentPage === 'Active') {\n            return <Active />;\n        }\n        if (currentPage === 'Rejections') {\n            return <Rejections />;\n        }\n        if (currentPage === 'Inactive') {\n            return <Inactive />;\n\n        } if (currentPage === 'Login') {\n            return <Login />;\n        }\n        return <Interviews />;\n\n    };\n\n    return (\n        <><div className=\"bg-dark text-secondary px-1 py-2 text-start\">\n            <div className=\"py-5\">\n                <h1 className=\"display-5 fw-bold text-white\">My Applications</h1>\n            </div>\n        </div><div className=\"row\">\n                <div className=\"col-2\">\n                    <div style={{ display: 'flex', height: '100vh', overflow: 'scroll initial' }}>\n                        <CDBSidebar textColor=\"#fff\" backgroundColor=\"#333\">\n                            <CDBSidebarHeader>\n                                <a href=\"#Home\" className=\"text-decoration-none\" style={{ color: 'inherit' }} onClick={() => handlePageChange('Home')}>\n                                    Home\n                                </a>\n                            </CDBSidebarHeader>\n                            <CDBSidebarContent className=\"sidebar-content\">\n                                <CDBSidebarMenu>\n                                    <li className=\"nav-item mx-0 mx-lg-1\">\n                                        <a\n                                            href=\"#active\"\n                                            className=\"text-decoration-none\" style={{ color: 'inherit' }}\n                                            onClick={() => handlePageChange('Active')}\n                                            className={currentPage === 'Active' ? 'nav-link active py-3 px-0 px-lg-3 rounded' : 'nav-link py-3 px-0 px-lg-3 rounded'}>\n                                            All Applications\n                                        </a>\n                                    </li>\n                                    <li className=\"nav-item mx-0 mx-lg-1\">\n                                        <a\n                                            href=\"#interviews\"\n                                            className=\"text-decoration-none\" style={{ color: 'inherit' }}\n                                            onClick={() => handlePageChange('Interviews')}\n                                            className={currentPage === 'Interviews' ? 'nav-link active py-3 px-0 px-lg-3 rounded' : 'nav-link py-3 px-0 px-lg-3 rounded'}>\n                                            Interviews\n                                        </a>\n                                    </li>\n                                    <li className=\"nav-item mx-0 mx-lg-1\">\n                                        <a\n                                            href=\"#rejections\"\n                                            className=\"text-decoration-none\" style={{ color: 'inherit' }}\n                                            onClick={() => handlePageChange('Rejections')}\n                                            className={currentPage === 'Rejections' ? 'nav-link active py-3 px-0 px-lg-3 rounded' : 'nav-link py-3 px-0 px-lg-3 rounded'}>\n                                            Rejections\n                                        </a>\n                                    </li>\n                                    <li className=\"nav-item mx-0 mx-lg-1\">\n                                        <a\n                                            href=\"#inactive\"\n                                            className=\"text-decoration-none\" style={{ color: 'inherit' }}\n                                            onClick={() => handlePageChange('Inactive')}\n                                            className={currentPage === 'Inactive' ? 'nav-link active py-3 px-0 px-lg-3 rounded' : 'nav-link py-3 px-0 px-lg-3 rounded'}>\n                                            Inactive\n                                        </a>\n                                    </li>\n                                    <li className=\"nav-item mx-0 mx-lg-1\">\n                                        <a\n                                            href=\"#Login\"\n                                            className=\"text-decoration-none\" style={{ color: 'inherit' }}\n                                            onClick={() => handlePageChange('Login')}\n                                            className={currentPage === 'Login' ? 'nav-link active py-3 px-0 px-lg-3 rounded' : 'nav-link py-3 px-0 px-lg-3 rounded'}>\n                                            Login\n                                        </a>\n                                    </li>\n\n\n\n\n\n                                </CDBSidebarMenu>\n                            </CDBSidebarContent>\n\n                            <CDBSidebarFooter style={{ textAlign: 'center' }}>\n                                <div\n                                    style={{\n                                        padding: '20px 5px',\n                                    }}\n                                >\n                                    \n                                    <a\n                                            href=\"#Logout\"\n                                            className=\"text-decoration-none\" style={{ color: 'inherit' }}\n                                            onClick={() => handlePageChange('Logout')}\n                                            className={currentPage === 'Logout' ? 'nav-link active py-3 px-0 px-lg-3 rounded' : 'nav-link py-3 px-0 px-lg-3 rounded'}>\n                                            Logout\n                                        </a>\n                                </div>\n                            </CDBSidebarFooter>\n                        </CDBSidebar>\n                    </div>\n                </div>\n                <div className=\"col-9\">\n                    <div id=\"content align-self-end\">\n\n                        {renderPage()}\n\n                    </div>\n\n                </div>\n\n            </div></>\n\n\n\n    );\n}\n\nexport default NavBar;\n\n\n","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\pages\\Rejections.js",["70","71"],"import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_REJECTIONS } from '../utils/queries';\n\nexport default function Rejection() {\n\n    const { loading, data } = useQuery(QUERY_REJECTIONS)\n\n      const rejections = data?.rejection || [];;\n      console.log(rejections)\n\n\n\n    return ( \n        <div>\n     {rejections ? (\n              <section>\n                <table>\n                  <thead>\n                    <tr>\n                    <th>Date Applied</th>\n                      <th>Company Name</th>\n                      <th>Position</th>\n                      <th>Location</th>\n                      <th>Date Rejected</th>\n                    </tr>\n                  </thead>\n    \n                  <tbody>\n                    {rejections.map((rej) => (\n                      <tr key={rej.id}>\n                        <td>{rej.dateApplied}</td>\n                        <td>{rej.companyName}</td>\n                        <td>{rej.position}</td>\n                        <td>{rej.location}</td>\n                        <td>{rej.dateRejected}</td>\n    \n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </section>\n\n          ) : (\n            <span>Hmm... seems that there are no applications here!</span>\n          )}\n          </div> \n\n\n    );\n}","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\pages\\Active.js",["72","73","74","75","76","77","78","79"],"import { React, useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_APPLICATIONS } from '../utils/queries';\nimport Modal from \"react-bootstrap/Modal\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\nimport { faXmark } from '@fortawesome/free-solid-svg-icons'\nconst check = <FontAwesomeIcon icon={faCheck} size=\"1x\" fixedWidth className=\"check\"/>\nconst reject = <FontAwesomeIcon icon={faXmark} size=\"1x\" fixedWidth className=\"reject\"/>\n\n\nexport default function Home() {\n  const { loading, data } = useQuery(QUERY_APPLICATIONS);\n  const applications = data?.applications || [];\n  console.log(applications)\n\n\n  const [isOpen, setIsOpen] = useState(false);\n  const showModal = (e) => {\n    setIsOpen({ show: true })\n  };\n  const hideModal = () => {\n    setIsOpen(false)\n  };\n\n\n  return (\n    <div>\n      {applications ? (\n        <>\n          <section>\n            <table>\n              <thead>\n                <tr>\n                <th>Date Applied</th>\n                  <th>Company Name</th>\n                  <th>Position</th>\n                  <th>Location</th>\n                  <th>Update</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {applications.map((application) => (\n                  <tr key={application.id}>\n                    <td>{application.dateApplied}</td>\n                    <td>{application.companyName}</td>\n                    <td>{application.position}</td>\n                    <td>{application.location}</td>\n\n                    <td>\n                      <button\n                        type=\"button\"\n                        className=\"yayInterview\"\n                      //   onClick={() => removeApplication(application.id)}\n                      >\n                        <a className=\"check\">{check}</a>\n                      </button>\n                      <button\n                        type=\"button\"\n                        className=\"booReject\"\n                      //   onClick={() => removeApplication(application.id)}\n                      >\n                        <a className=\"reject\">{reject}</a>\n                      </button>\n\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </section>\n        </>\n      ) : (\n        <span>Hmm... seems that there are no applications here!</span>\n      )}\n\n      \n    </div>\n  );\n}","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\pages\\Inactive.js",[],"C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\pages\\Login.js",[],"C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\pages\\Home.js",["80","81","82","83"],"import { React, useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_APPLICATIONS } from '../utils/queries';\nimport Modal from \"react-bootstrap/Modal\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\nimport { faXmark } from '@fortawesome/free-solid-svg-icons'\nconst check = <FontAwesomeIcon icon={faCheck} size=\"1x\" fixedWidth className=\"check\"/>\nconst reject = <FontAwesomeIcon icon={faXmark} size=\"1x\" fixedWidth className=\"reject\"/>\n\n\nexport default function Home() {\n\n  const { loading, data } = useQuery(QUERY_APPLICATIONS);\n  const applications = data?.applications || [];\n  console.log(applications)\n\n  // let color =''\n\n  // for (let i = 0; i < applications.length; i++) {\n  //   const element = applications[i].interview\n  //     console.log(element)\n  //     switch (element) {\n  //       case true:\n  //         color = \"blue\";\n  //         case false:\n  //           color = \"green\";\n  //         default:\n  //           color =\"black\"\n  //     }\n  // } \n\n\n\n  const [isOpen, setIsOpen] = useState(false);\n  const showModal = (e) => {\n    setIsOpen({ show: true })\n  };\n  const hideModal = () => {\n    setIsOpen(false)\n  };\n\n\n \n\n  return (\n    <div>\n      <button\n        type=\"button\"\n        onClick={showModal}\n      >\n        <span role=\"img\" aria-label=\"close\">\n          Add new application\n        </span>\n      </button>\n\n\n      {applications ? (\n        <>\n          <section>\n            <table>\n              <thead>\n                <tr>\n                <th>Date Applied</th>\n                  <th>Company Name</th>\n                  <th>Position</th>\n                  <th>Location</th>\n                  <th>Update</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {applications.map((application) => (\n                  <tr key={application.id}>\n                    <td>{application.dateApplied}</td>\n                    <td style = {{color: 'black'}}>{application.companyName}</td>\n                    <td>{application.position}</td>\n                    <td>{application.location}</td>\n\n                    <td>\n                      <button\n                        type=\"button\"\n                        className=\"yayInterview\"\n                      //   onClick={() => removeApplication(application.id)}\n                      >\n                        <a className=\"check\">{check}</a>\n                      </button>\n                      <button\n                        type=\"button\"\n                        className=\"booReject\"\n                      //   onClick={() => removeApplication(application.id)}\n                      >\n                        <a className=\"reject\">{reject}</a>\n                      </button>\n\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </section>\n        </>\n      ) : (\n        <span>Hmm... seems that there are no applications here!</span>\n      )}\n\n      <Modal\n        show={isOpen}\n        onHide={hideModal}\n        size='lg'\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <div className=\"modal-header border-0\"><button className=\"btn-close\" type=\"button\" onClick={hideModal} data-bs-dismiss=\"modal\" aria-label=\"Close\"></button></div><div className=\"modal-body  pb-1\">\n    <div className=\"container\">\n        <div className=\"row \">\n            <div className=\"col\">\n\n            </div>\n                <form className=\"mt-4 new-app\">\n\n<div className=\"form-group\">\n    <label for=\"companyName\"><strong>Company Name*</strong></label>\n    <input type=\"input\" className=\"form-control companyName\" id=\"companyName\" name=\"companyName\"\n        aria-describedby=\"companyName\" placeholder=\"Company Name\"/>\n\n</div>\n\n<br/>\n<div className=\"form-group\">\n    <label for=\"age\"><strong>Position Title*</strong> </label>\n    <input type=\"input\" className=\"form-control\" id=\"position\" name=\"position\"\n        aria-describedby=\"position\" placeholder=\"Position Title\"/>\n\n</div>\n\n<br/>\n<div className=\"form-group\">\n    <label for=\"date\"><strong>Date Applied*</strong> </label>\n    <input type=\"input\" className=\"form-control\" id=\"date\" name=\"date\" aria-describedby=\"date\"\n        placeholder=\"ie 02/05/2021\"/>\n\n</div>\n<br/>\n<div className=\"form-group\">\n    <label for=\"location\"><strong>Location</strong></label>\n    <input type=\"input\" className=\"form-control\" id=\"location\" name=\"location\"\n        aria-describedby=\"location\" placeholder=\"City, State or Remote\"/>\n\n</div>\n<br/>\n<div className=\"form-group\">\n    <label for=\"description\"><strong>Job Description</strong></label>\n    <textarea type=\"input\" className=\"form-control\" id=\"description\" name=\"description\"\n        aria-describedby=\"description\" row=\"3\" placeholder=\"\"></textarea>\n\n</div>\n<br/>\n<div className=\"form-group\">\n    <label for=\"notes\"><strong>Additional Notes</strong></label>\n    <textarea type=\"input\" className=\"form-control\" id=\"notes\" name=\"notes\" aria-describedby=\"notes\"\n        row=\"3\" placeholder=\"\"></textarea>\n        </div>\n\n\n    {/* <div className=\"hidden\">\n        <div className=\"form-check\">\n            <input type=\"radio\" className=\"form-check-input\" value={false} name=\"rej\" checked/> rejection\n        </div>\n        <div className=\"form-check\">\n            <input type=\"radio\" className=\"form-check-input\" value={false} name=\"inter\" checked/>\n            Interview\n\n        </div>\n        <div className=\"form-check\">\n            <input type=\"radio\" className=\"form-check-input\" value=\"null\" name=\"dateRej\" checked/> Date\n            rejected\n\n        </div>\n        <div className=\"form-check\">\n            <input type=\"radio\" className=\"form-check-input\" value=\"null\" name=\"intDate\" checked/>\n            Interview date\n\n        </div>\n    </div> */}\n    <br/>\n\n\n\n\n\n\n\n    <button type=\"submit\">Add application</button>\n    <p>* indicates required field </p>\n</form>\n</div>\n</div>\n</div>\n\n\n      </Modal>\n    </div>\n  );\n}","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\pages\\Interviews.js",["84","85"],"import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_INTERVIEWS } from '../utils/queries';\n\nexport default function Interviews() {\n    // const { interview } = useParams();\n    const { loading, data } = useQuery(QUERY_INTERVIEWS)\n\n      const interviews = data?.interview || [];;\n      console.log(interviews)\n\n    const color = \"lightseagreen\"\n    // if (interviews.interview == false) {\n    //     return color = 'lightseagreen'\n    // } \n\n    return ( \n        <div>\n     {interviews ? (\n              <section>\n                <table>\n                  <thead>\n                    <tr>\n                    <th>Date Applied</th>\n                      <th>Company Name</th>\n                      <th>Position</th>\n                      <th>Location</th>\n                      <th>Interview Date</th>\n                    </tr>\n                  </thead>\n    \n                  <tbody>\n                    {interviews.map((int) => (\n                      <tr key={int.id} style={{ color }}>\n                        <td>{int.dateApplied}</td>\n                        <td >{int.companyName}</td>\n                        <td>{int.position}</td>\n                        <td>{int.location}</td>\n                        <td>{int.interviewDate}</td>\n    \n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </section>\n\n          ) : (\n            <span>Hmm... seems that there are no applications here!</span>\n          )}\n          </div> \n\n\n    );\n}","C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\utils\\queries.js",[],"C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\utils\\mutations.js",[],"C:\\Users\\zhkim\\Desktop\\Homework\\Job-Tracker\\client\\src\\utils\\Auth.js",[],{"ruleId":"86","severity":1,"message":"87","line":2,"column":35,"nodeType":"88","messageId":"89","endLine":2,"endColumn":41},{"ruleId":"86","severity":1,"message":"90","line":2,"column":43,"nodeType":"88","messageId":"89","endLine":2,"endColumn":48},{"ruleId":"86","severity":1,"message":"91","line":8,"column":5,"nodeType":"88","messageId":"89","endLine":8,"endColumn":23},{"ruleId":"86","severity":1,"message":"92","line":10,"column":10,"nodeType":"88","messageId":"89","endLine":10,"endColumn":17},{"ruleId":"93","severity":1,"message":"94","line":61,"column":45,"nodeType":"95","messageId":"96","endLine":61,"endColumn":166},{"ruleId":"93","severity":1,"message":"94","line":70,"column":45,"nodeType":"95","messageId":"96","endLine":70,"endColumn":170},{"ruleId":"93","severity":1,"message":"94","line":79,"column":45,"nodeType":"95","messageId":"96","endLine":79,"endColumn":170},{"ruleId":"93","severity":1,"message":"94","line":88,"column":45,"nodeType":"95","messageId":"96","endLine":88,"endColumn":168},{"ruleId":"93","severity":1,"message":"94","line":97,"column":45,"nodeType":"95","messageId":"96","endLine":97,"endColumn":165},{"ruleId":"93","severity":1,"message":"94","line":120,"column":45,"nodeType":"95","messageId":"96","endLine":120,"endColumn":166},{"ruleId":"86","severity":1,"message":"97","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":19},{"ruleId":"86","severity":1,"message":"98","line":8,"column":13,"nodeType":"88","messageId":"89","endLine":8,"endColumn":20},{"ruleId":"86","severity":1,"message":"99","line":1,"column":27,"nodeType":"88","messageId":"89","endLine":1,"endColumn":36},{"ruleId":"86","severity":1,"message":"100","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":13},{"ruleId":"86","severity":1,"message":"98","line":13,"column":11,"nodeType":"88","messageId":"89","endLine":13,"endColumn":18},{"ruleId":"86","severity":1,"message":"101","line":18,"column":10,"nodeType":"88","messageId":"89","endLine":18,"endColumn":16},{"ruleId":"86","severity":1,"message":"102","line":19,"column":9,"nodeType":"88","messageId":"89","endLine":19,"endColumn":18},{"ruleId":"86","severity":1,"message":"103","line":22,"column":9,"nodeType":"88","messageId":"89","endLine":22,"endColumn":18},{"ruleId":"104","severity":1,"message":"105","line":57,"column":25,"nodeType":"106","endLine":57,"endColumn":46},{"ruleId":"104","severity":1,"message":"105","line":64,"column":25,"nodeType":"106","endLine":64,"endColumn":47},{"ruleId":"86","severity":1,"message":"99","line":1,"column":27,"nodeType":"88","messageId":"89","endLine":1,"endColumn":36},{"ruleId":"86","severity":1,"message":"98","line":14,"column":11,"nodeType":"88","messageId":"89","endLine":14,"endColumn":18},{"ruleId":"104","severity":1,"message":"105","line":86,"column":25,"nodeType":"106","endLine":86,"endColumn":46},{"ruleId":"104","severity":1,"message":"105","line":93,"column":25,"nodeType":"106","endLine":93,"endColumn":47},{"ruleId":"86","severity":1,"message":"97","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":19},{"ruleId":"86","severity":1,"message":"98","line":8,"column":13,"nodeType":"88","messageId":"89","endLine":8,"endColumn":20},"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'CDBSidebarMenuItem' is defined but never used.","'NavLink' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'useParams' is defined but never used.","'loading' is assigned a value but never used.","'useEffect' is defined but never used.","'Modal' is defined but never used.","'isOpen' is assigned a value but never used.","'showModal' is assigned a value but never used.","'hideModal' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]